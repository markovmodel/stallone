<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>compmolbio</groupId>
	<artifactId>stallone</artifactId>
	<version>1.0.0.0-SNAPSHOT</version>
	<packaging>jar</packaging>

	<url>http://compmolbio.biocomputing-berlin.de/index.php</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<!-- TODO: describe build process -->
	<build>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
					<optimize>true</optimize>
					<useIncrementalCompilation>false</useIncrementalCompilation>
					<showWarnings>true</showWarnings>
					<showDeprecation>true</showDeprecation>
					<compilerArgs>
						<arg>-Xlint:unchecked</arg>
					</compilerArgs>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<!-- Goal assembly:single is bound to maven execution phase "prepare-package" -->
				<executions>
					<execution>
						<id>distro-assembly</id>
						<phase>compile</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<!-- HERE, the configuration (which is loaded from file assemblyDescriptor.xml) 
							of the assembly is setup -->
						<configuration>
							<descriptorRefs>
								<descriptorRef>jar-with-dependencies</descriptorRef>
							</descriptorRefs>

							<archive>
								<index>true</index>
								<manifest>
									<addClasspath>true</addClasspath>
								</manifest>
								<manifestEntries>
									<version>${project.version}</version>
								</manifestEntries>
							</archive>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- build runtime jar, which includes all dependencies -->
			<plugin>
				<artifactId>proguard-maven-plugin</artifactId>
				<groupId>com.github.wvengen</groupId>
				<version>2.0.6</version>

				<executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>proguard</goal>
						</goals>
					</execution>
				</executions>

				<dependencies>
					<dependency>
						<groupId>net.sf.proguard</groupId>
						<artifactId>proguard-base</artifactId>
						<version>4.10</version>
						<scope>runtime</scope>
					</dependency>
				</dependencies>

				<configuration>
					<injar>${project.build.finalName}-jar-with-dependencies.jar</injar>
					<outjar>${project.build.finalName}-jar-with-dependencies-proguard.jar</outjar>
					<outputDirectory>${project.build.directory}</outputDirectory>
					<libs>
						<lib>${java.home}/lib/rt.jar</lib>
						<lib>${java.home}/lib/jsse.jar</lib>
					</libs>
					<addMavenDescriptor>false</addMavenDescriptor>

					<!-- do not include any libraries. we depend on: we are already working 
						on a jar which contains all dependencies in one jar See: previous package 
						step -->
					<includeDependency>false</includeDependency>

					<obfuscate>false</obfuscate>

					<options>
						<option>-allowaccessmodification</option>
						<!-- <option>-keep class * implements AbstractCmd</option> -->
						<option>-keep class
							edu.cornell.lassp.houle.RngPack.RandomElement</option>
						<option>-keep class
							stallone.coordinates.AbstractCoordinateTransform</option>
						<option>-keep class stallone.stat.RunningAverage</option>
						<option>-keep class stallone.stat.modelselection.ExitTimeSplitter</option>
						<option>-keep class stallone.intsequence.IntArrayTokenizer</option>
						<!-- TODO: activated optimization leads to errors in jep library: investigate! -->
						<option>-dontoptimize</option>
						<option>-keepclasseswithmembers public class * { public static
							void main(java.lang.String[]); }</option>
					</options>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>python-wrapper</id>
			<build>
				<plugins>
					<!-- build stallone api jar, which is used to easily wrap all api packages -->
					<plugin>
						<artifactId>maven-jar-plugin</artifactId>
						<version>2.4</version>
						<executions>
							<execution>
								<id>api</id>
								<goals>
									<goal>jar</goal>
								</goals>
								<phase>compile</phase>
								<configuration>
									<classifier>api</classifier>
									<!-- include the stallone.api package recursively -->
									<includes>
										<include>stallone/api/**/*</include>
									</includes>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- copy jars for stallone jcc setup to build dir (where setup lies) -->
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<groupId>org.apache.maven.plugins</groupId>
						<version>2.4.3</version>

						<executions>
							<execution>
								<phase>compile</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
							</execution>
						</executions>

						<configuration>
							<outputDirectory>pystallone</outputDirectory>
							<resources>
								<resource>
									<directory>${project.build.directory}</directory>
									<includes>
										<include>
											${project.build.finalName}-jar-with-dependencies-proguard.jar
										</include>
										<include>
											${project.build.finalName}-api.jar
										</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</plugin>

					<!-- performs the building of the wrapper and installs it locally -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.2.1</version>
						<configuration>
							<executable>python</executable>
							<workingDirectory>pystallone/</workingDirectory>
						</configuration>
						<executions>
							<execution>
								<id>setuptools install</id>
								<phase>install</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<arguments>
										<argument>setup.py</argument>
										<argument>build</argument>
										<argument>install</argument>
										<argument>--user</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<dependencies>
		<!-- jep library, for function string parsing/evaluation -->
		<dependency>
			<groupId>jep</groupId>
			<artifactId>jep</artifactId>
			<version>2.24</version>
		</dependency>

		<!-- cern colt library used for Step_Rev_Quad_Trendelkamp -->
		<dependency>
			<groupId>colt</groupId>
			<artifactId>colt</artifactId>
			<version>1.0.3</version>
		</dependency>

		<!-- recent netlib bindings which supports native libs -->
		<dependency>
			<groupId>com.github.fommil.netlib</groupId>
			<artifactId>all</artifactId>
			<version>1.1.2</version>
			<type>pom</type>
		</dependency>

		<!-- matrix tools kit -->
		<dependency>
			<groupId>com.googlecode.matrix-toolkits-java</groupId>
			<artifactId>mtj</artifactId>
			<version>1.0.1</version>
		</dependency>

		<!-- junit testing -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<reporting>
	<!-- TODO: add javadoc plugin -->
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>3.0.1</version>
				<configuration>
					<rulesets>
						<ruleset>/rulesets/braces.xml</ruleset>
						<ruleset>/rulesets/naming.xml</ruleset>
						<ruleset>/rulesets/design.xml</ruleset>
					</rulesets>
				</configuration>
			</plugin>
		</plugins>
	</reporting>
</project>
