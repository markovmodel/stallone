<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>compmolbio</groupId>
	<artifactId>stallone</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>pom</packaging>

	<name>Stallone-lib</name>
	<url>http://compmolbio.biocomputing-berlin.de/index.php</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- introduce a property buildNumber -->
		<maven.build.timestamp.format>yyyyMMdd</maven.build.timestamp.format>
		<buildNumber>${maven.build.timestamp}</buildNumber>
	</properties>

	<build>
		<sourceDirectory>../src</sourceDirectory>
		<testSourceDirectory>../test</testSourceDirectory>
		<pluginManagement>
			<plugins>
				<plugin>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.1</version>
					<configuration>
						<source>1.7</source>
						<target>1.7</target>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<!-- profile -P buildDistribution to construct the final compressed jar 
		containing all dependencies -->
	<profiles>
		<profile>
			<id>python-wrapper</id>
			<build>
				<plugins>
					<!-- build api jar -->
					<plugin>
						<artifactId>maven-jar-plugin</artifactId>
						<version>2.4</version>
						<configuration>
							<classifier>api</classifier>
							<classesDirectory>../target/</classesDirectory>
							<includes>
								<include>stallone/api/**/*</include>
							</includes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>buildDistribution</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<!-- Goal assembly:single is bound to maven execution phase "prepare-package" -->
						<executions>
							<execution>
								<id>distro-assembly</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<!-- HERE, the configuration (which is loaded from file assemblyDescriptor.xml) 
									of the assembly is setup -->
								<configuration>
									<descriptorRefs>
										<descriptorRef>jar-with-dependencies</descriptorRef>
									</descriptorRefs>
								</configuration>
							</execution>

							<execution>
								<id>build-final-zip</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>

								<configuration>
									<!-- HERE, the configuration for zip creation is set -->
									<descriptors>
										<descriptor>zipAssembly.xml</descriptor>
									</descriptors>
									<outputDirectory>distribution</outputDirectory>
									<finalName>${project.build.finalName}_${buildNumber}</finalName>
									<appendAssemblyId>false</appendAssemblyId>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>com.pyx4me</groupId>
						<artifactId>proguard-maven-plugin</artifactId>
						<version>2.0.4</version>

						<!-- New version of proguard-maven-plugin from github -->
						<!-- <groupId>com.github.wvengen</groupId> <artifactId>proguard-maven-plugin</artifactId> 
							<version>2.0.5</version> -->

						<executions>
							<!-- is executed second -->
							<execution>
								<phase>prepare-package</phase>
								<goals>
									<goal>proguard</goal>
								</goals>
							</execution>
						</executions>

						<configuration>
							<injar>${project.build.finalName}-jar-with-dependencies.jar</injar>
							<outjar>${project.build.finalName}-small.jar</outjar>
							<outputDirectory>${project.build.directory}</outputDirectory>
							<libs>
								<lib>${java.home}/lib/rt.jar</lib>
								<lib>${java.home}/lib/jsse.jar</lib>
							</libs>
							<addMavenDescriptor>false</addMavenDescriptor>

							<!-- do not include any libraries. we depend on: we are already working 
								on a jar which contains all dependencies in one jar See: previous package 
								step -->
							<includeDependency>false</includeDependency>

							<obfuscate>false</obfuscate>

							<options>
								<option>-allowaccessmodification</option>
								<option>-keep class * implements AbstractCmd</option>
								<option>-dontoptimize</option>
								<option>-keepclasseswithmembers public class * { public static
									void main(java.lang.String[]); }</option>
							</options>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<dependencies>
		<!-- java netlib -->
		<dependency>
			<groupId>com.googlecode.netlib-java</groupId>
			<artifactId>netlib-java</artifactId>
			<version>0.9.3</version>
		</dependency>

		<!-- matrix-toolkits-java -->
		<dependency>
			<groupId>com.googlecode.matrix-toolkits-java</groupId>
			<artifactId>mtj</artifactId>
			<version>0.9.14</version>
		</dependency>

		<!-- jep library, has to be installed manually to local repo... -->
		<dependency>
			<groupId>jep</groupId>
			<artifactId>jep</artifactId>
			<version>2.4.1</version>
		</dependency>

		<!-- junit testing -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>3.0.1</version>
				<configuration>
					<rulesets>
						<ruleset>/rulesets/braces.xml</ruleset>
						<ruleset>/rulesets/naming.xml</ruleset>
						<ruleset>/rulesets/design.xml</ruleset>
					</rulesets>
				</configuration>
			</plugin>
		</plugins>
	</reporting>
</project>
